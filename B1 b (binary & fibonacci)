def binary_search(arr, roll_number):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == roll_number:
            return True
        elif arr[mid] < roll_number:
            left = mid + 1
        else:
            right = mid - 1
    return False

def fibonacci_search(arr, roll_number):
    n = len(arr)
    fib_m_2 = 0
    fib_m_1 = 1
    fib_m = fib_m_1 + fib_m_2
    while fib_m < n:
        fib_m_2 = fib_m_1
        fib_m_1 = fib_m
        fib_m = fib_m_1 + fib_m_2
    offset = -1
    while fib_m > 1:
        i = min(offset + fib_m_2, n - 1)
        if arr[i] < roll_number:
            fib_m = fib_m_1
            fib_m_1 = fib_m_2
            fib_m_2 = fib_m - fib_m_1
            offset = i
        elif arr[i] > roll_number:
            fib_m = fib_m_2
            fib_m_1 -= fib_m_2
            fib_m_2 = fib_m - fib_m_1
        else:
            return True
    if fib_m_1 and offset + 1 < n and arr[offset + 1] == roll_number:
        return True
    return False

def generate_sorted_roll_numbers(n):
    return list(range(1000, 1000 + n))

def main():
    n = 10
    roll_numbers = generate_sorted_roll_numbers(n)
    print("Sorted roll numbers of students who attended the training program:", roll_numbers)
    roll_number_to_search = int(input("Enter the roll number to search: "))
    found = binary_search(roll_numbers, roll_number_to_search)
    print(f"Binary Search: Roll number {roll_number_to_search} {'found' if found else 'not found'}")
    found = fibonacci_search(roll_numbers, roll_number_to_search)
    print(f"Fibonacci Search: Roll number {roll_number_to_search} {'found' if found else 'not found'}")

main()
