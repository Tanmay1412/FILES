#include<iostream>
using namespace std;

class node {
public:
    int data;    
    node* next;
    node* prev;
};

node* createNode(int data) {
    node* t;
    t = new node(); 
    t->data = data;   
    t->next = NULL;  
    t->prev = NULL; 
    return(t);
}

int deque(node** f) {
    if(*f == NULL) {
        cout << "\nQEmpty:\n";
        return -1;
    }
    node* t;
    t = *f;
    *f = t->next;
    int t1 = t->data;
    cout << "\ndeleting:" << t1 << "\n";
    delete(t);
    return t1;
}

int dequeR(node* e) {
    if(e == NULL) {
        cout << "\nQEmpty:\n";
        return -1;
    }
    node* t;
    t = e;
    e = t->prev;
    int t1 = t->data;
    cout << "\nRear deleting:" << t1 << "\n";
    delete(t);
    return t1;
}

node* enqueue(node* e, int data) {
    node* t, * h;
    t = createNode(data); 
    h = e;
    h->next = t;
    t->prev = h;
    e = t;
    e->next = NULL;
    return e;
}

node* enqueueF(node* f, int data) {
    node* t;
    t = createNode(data);
    t->next = f;
    t->prev = NULL;
    f = t;
    cout << "Node inserted at Head: " << data;
    return f;
}

void printQ(node* h, int dir) {
    node* t;
    t = h;
    cout << "\n------Queue Content----\n";
    while(t != NULL) {
        cout << "\n " << t->data; 
        if(dir == 1) {
            t = t->next;
        } else {
            t = t->prev;
        }
    }
}

int main() { 
    int arr[] = {10, 20, 30, 40, 50, 60};
    node* front, * rear;
    front = createNode(arr[0]);
    rear = front;
    for(int i = 1; i < 6; i++) {
        rear = enqueue(rear, arr[i]);
    }
    front = enqueueF(front, 1000);
    rear = enqueue(rear, 100);
    printQ(front, 1);
    cout << "\n----Deque----";
    cout << "\n" << dequeR(rear);
    cout << "\n" << deque(&front);
    cout << "\n" << deque(&front);
    cout << "\n" << deque(&front);
    cout << "\n" << deque(&front);
    cout << "\n" << deque(&front);
    cout << "\n" << deque(&front);
    cout << "\n" << deque(&front);

    return 0;
}
